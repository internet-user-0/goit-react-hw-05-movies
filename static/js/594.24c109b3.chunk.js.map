{"version":3,"file":"static/js/594.24c109b3.chunk.js","mappings":"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","sources":["components/Api/api.js","pages/MovieCard.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '37314a167a558e9a6582597c5654a5d7';\n\nconst TREND_URL = `${BASE_URL}/trending/movie/week`;\n\nexport const getTrendingMovies = async () => {\n   try {\n      const { data } = await axios.get(\n         `${TREND_URL}?api_key=${API_KEY}&page=1`\n      );\n      return data.results;\n   } catch (error) {\n      console.error(error.message);\n   }\n};\n\nexport const getGenreMovies = async () => {\n   try {\n      const {data} = await axios.get(\n         `${BASE_URL}/genre/movie/list?api_key=${API_KEY}&language=en-US`\n      );\n      return data.genres;\n   } catch (error) {\n      console.error(error.message);\n   }\n};\n\n\n\nexport const getSearchMovies = async (query) => {\n   try {\n      const {data} = await axios.get(\n         `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n      return data.results;\n   } catch (error) {\n      console.error(error.message);\n   }\n};\n\nexport const getDetailsMovie = async (movieId) => {\n   try {\n      const {data} = await axios.get(\n         `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n         console.log(data)\n      return data;\n   } catch (error) {\n      console.error(error.message);\n   }\n};\n\n\nexport const getActorsMovie = async (movieId) => {\n   try {\n      const {data} = await axios.get(\n         `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n      return data;\n   } catch (error) {\n      console.error(error.message);\n   }\n};\n\n\nexport const getReviewsMovie = async (movieId) => {\n   try {\n      const {data} = await axios.get(\n         `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n      return data.results;\n   } catch (error) {\n      console.error(error.message);\n   }\n};","import { useParams, NavLink, useLocation } from 'react-router-dom';\nimport {getGenreMovies, getDetailsMovie, getActorsMovie, getReviewsMovie } from '../components/Api/api';\n\nimport { useEffect, useState } from 'react';\n\nconst MovieCard = () => {\n   const [currentCard, setCurrentCard] = useState('');\n   const [ genres , setGenres] = useState('');\n   const [actors, setActors] = useState('')\n   const [reviews, setReviews] = useState('')\n   const { currentId } = useParams();\n   const location = useLocation()\n   // console.log(location)\n\n\n\n   useEffect(() => {\n      async function getData() {\n         setCurrentCard(await getDetailsMovie(currentId))\n            setActors(await getActorsMovie(currentId))\n            setReviews(await getReviewsMovie(currentId))\n            setGenres(await getGenreMovies());\n      }\n      getData();\n   }, [currentId]);\n\n\n\nfunction getGenreMarkup() {\n   console.log(currentCard.genres)\n   console.log(genres)\n\n   console.log()\n};\ngetGenreMarkup()\n\n   return (\n      <main>\n         <NavLink to={`${location.state.from.pathname}` ?? '/home'}>Go back</NavLink>\n         <div>\n            <img src={`https://image.tmdb.org/t/p/w500/${currentCard.poster_path}`} alt=\"#\" width='300'/>\n            <ul>\n               <li>\n                  <h2>\n                     {currentCard.title} <span>()</span>\n                  </h2>\n               </li>\n               <li>user score <p>{currentCard.vote_average}</p></li>\n               <li>\n                  <h3>Overvier</h3>\n                  <p>{currentCard.overview}</p>\n               </li>\n               <li>\n                  <h4>Gernes</h4>\n                  <ul>{currentCard && currentCard.genres.map((genre =>{\n                     return <li key={genre.id}>{genre.name}</li>\n                  }))}</ul>\n               </li>\n            </ul>\n         </div>\n         <div>\n            <p>additional information</p>\n            <ul>\n               <li>\n                  Cast <p>{'people'}</p>\n                  сделать это кнопкой по которой рисуется разметка \n                  {actors && actors.cast.map((actor => {\n                     return (<p key={actor.id}>{actor.name}</p>)\n                  }))}\n               </li>\n               <li>Reviews\n               сделать это кнопкой по которой рисуется разметка\n               {reviews && reviews.map((review => {\n                     return (<p key={review.id}>{review.content}</p>)\n                  }))}\n               </li>\n            </ul>\n         </div>\n      </main>\n   );\n};\n\nexport default MovieCard;\n"],"names":["BASE_URL","API_KEY","TREND_URL","getTrendingMovies","axios","data","results","console","error","message","getGenreMovies","genres","getSearchMovies","query","getDetailsMovie","movieId","log","getActorsMovie","getReviewsMovie","useState","currentCard","setCurrentCard","setGenres","actors","setActors","reviews","setReviews","currentId","useParams","location","useLocation","useEffect","getData","to","state","from","pathname","src","poster_path","alt","width","title","vote_average","overview","map","genre","name","id","cast","actor","review","content"],"sourceRoot":""}